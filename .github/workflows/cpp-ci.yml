name: CI using Docker

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  BUILD_TYPE: Release

jobs:
  format-check:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/jaehyung409/extended-stl-style-containers/cpp-dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run clang-format check
        run: |
          FILES=$(find modules -name "*.cppm" -o -name "*.cpp" -o -name "*.hpp")
          if [ -n "$FILES" ]; then
            clang-format --dry-run --Werror $FILES
          else
            echo "No C++ files to check."
          fi

  clang-tidy-check:
    runs-on: ubuntu-latest
    needs: format-check
    strategy:
      matrix:
        compiler: [gcc-15, clang-20]
        include:
          - compiler: gcc-15
            cc: gcc-15
            cxx: g++-15
          - compiler: clang-20
            cc: clang-20
            cxx: clang++-20
    container:
      image: ghcr.io/jaehyung409/extended-stl-style-containers/cpp-dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure project with ${{ matrix.compiler }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build-${{ matrix.compiler }}
          cd build-${{ matrix.compiler }}
          cmake -GNinja \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_CXX_SCAN_FOR_MODULES=OFF \
            ..
      - name: Run clang-tidy with ${{ matrix.compiler }}
        run: |
          cd build-${{ matrix.compiler }}
          CPPM_FILES=$(find ../modules -name "*.cppm")
          if [ -n "$CPPM_FILES" ]; then
            clang-tidy -p . $CPPM_FILES
          else
            echo "No .cppm files found to check with clang-tidy."
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: clang-tidy-check
    strategy:
      matrix:
        compiler: [gcc-15, clang-20]
        include:
          - compiler: gcc-15
            cc: gcc-15
            cxx: g++-15
          - compiler: clang-20
            cc: clang-20
            cxx: clang++-20
    container:
      image: ghcr.io/jaehyung409/extended-stl-style-containers/cpp-dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure project with ${{ matrix.compiler }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build-${{ matrix.compiler }}
          cd build-${{ matrix.compiler }}
          cmake -GNinja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_CXX_SCAN_FOR_MODULES=OFF \
            ..
      - name: Build project with ${{ matrix.compiler }}
        run: |
          cd build-${{ matrix.compiler }}
          ninja
      - name: Run selective tests with ${{ matrix.compiler }}
        run: |
          cd build-${{ matrix.compiler }}
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              BASE="HEAD~1"
            else
              BASE="${{ github.event.before }}"
            fi
            HEAD="${{ github.sha }}"
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD" || git show --name-only "$HEAD")
          
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/Array/"; then
            ctest -R test_array --output-on-failure
          fi
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/LinkedList/list"; then
            ctest -R test_list --output-on-failure
          fi
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/LinkedList/forward_list"; then
            ctest -R test_forward_list --output-on-failure
          fi

  benchmark:
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        compiler: [gcc-15, clang-20]
        include:
          - compiler: gcc-15
            cc: gcc-15
            cxx: g++-15
          - compiler: clang-20
            cc: clang-20
            cxx: clang++-20
    container:
      image: ghcr.io/jaehyung409/extended-stl-style-containers/cpp-dev:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure project with ${{ matrix.compiler }}
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build-${{ matrix.compiler }}
          cd build-${{ matrix.compiler }}
          cmake -GNinja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_CXX_SCAN_FOR_MODULES=OFF \
            ..
      - name: Build project with ${{ matrix.compiler }}
        run: |
          cd build-${{ matrix.compiler }}
          ninja
      - name: Determine changed files
        id: determine_changed_files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              BASE="HEAD~1"
            else
              BASE="${{ github.event.before }}"
            fi
            HEAD="${{ github.sha }}"
          fi
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD" || git show --name-only "$HEAD")
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Run selective benchmarks with ${{ matrix.compiler }}
        run: |
          cd build-${{ matrix.compiler }}
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/Array/"; then
            ./bench_array > bench_array_${{ matrix.compiler }}_result.txt || echo "Array benchmark failed" > bench_array_${{ matrix.compiler }}_result.txt
          fi
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/LinkedList/list"; then
            ./bench_list > bench_list_${{ matrix.compiler }}_result.txt || echo "List benchmark failed" > bench_list_${{ matrix.compiler }}_result.txt
          fi
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/LinkedList/forward_list"; then
            ./bench_forward_list > bench_forward_list_${{ matrix.compiler }}_result.txt || echo "Forward list benchmark failed" > bench_forward_list_${{ matrix.compiler }}_result.txt
          fi
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.compiler }}
          path: build-${{ matrix.compiler }}/*_result.txt
