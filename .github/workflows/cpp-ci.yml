# This starter workflow is for a CMake project running on a single platform.
name: CI init

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  BUILD_TYPE: Release

jobs:
  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install clang-format
      - name: Run clang-format check
        run: |
          FILES=$(git ls-files 'modules/datastructures/LinkedList/**/*.cppm' 'modules/datastructures/Array/*.cppm')
          if [ -n "$FILES" ]; then
            clang-format --dry-run --Werror $FILES
          else
            echo "No C++ files to check."
          fi
  # need to be update (check all files)

  clang-tidy-check:
    runs-on: ubuntu-latest
    needs: format-check
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies and newer tools
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          # Install LLVM 20 for latest C++20/23 modules support
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-20 main"
          sudo apt-get update
          sudo apt-get install clang-tidy-20
      - name: Configure project with CMake and Ninja
        run: |
          mkdir build
          cd build
          cmake -GNinja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_SCAN_FOR_MODULES=OFF -DCMAKE_CXX_COMPILER=clang++-20 ..
      - name: Run clang-tidy
        run: |
          cd build
          CPPM_FILES=$(git -C .. ls-files 'modules/**/*.cppm')
          if [ -n "$CPPM_FILES" ]; then
            clang-tidy-20 -p . $CPPM_FILES
          else
            echo "No .cppm files found to check with clang-tidy."
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: clang-tidy-check
    env:
      BUILD_TYPE: Release
    strategy:
      matrix:
        compiler: [gcc-15, clang-20]
        include:
          - compiler: gcc-15
            cc: gcc-15
            cxx: g++-15
          - compiler: clang-20
            cc: clang-20
            cxx: clang++-20
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Ninja and compilers
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          if [ "${{ matrix.compiler }}" = "gcc-15" ]; then
            # Install GCC 15 from toolchain PPA
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install gcc-15 g++-15
          else
            # Install LLVM/Clang 20
            wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-20 main"
            sudo apt-get update
            sudo apt-get install clang-20 clang++-20
          fi
      - name: Configure project
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build
          cd build
          cmake -GNinja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_SCAN_FOR_MODULES=OFF ..
      - name: Build project
        run: |
          cd build
          ninja
      - name: Run selective tests
        run: |
          cd build
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            # force push
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              BASE="HEAD~1"
            else
              BASE="${{ github.event.before }}"
            fi
            HEAD="${{ github.sha }}"
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD")
          
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/Array/"; then
            ctest -R test_array --output-on-failure
          fi
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/LinkedList/list"; then
            ctest -R test_list --output-on-failure
          fi
          if echo "$CHANGED_FILES" | grep -q "modules/datastructures/LinkedList/forward_list"; then
            ctest -R test_forward_list --output-on-failure
          fi

  benchmark:
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      BUILD_TYPE: Release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Ninja and tools
        run: |
          sudo apt-get update
          # Install GCC 15 for benchmark job
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install ninja-build cmake gcc-15 g++-15
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 100
      - name: Configure project
        run: |
          mkdir build
          cd build
          cmake -GNinja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_SCAN_FOR_MODULES=OFF ..
      - name: Build project
        run: |
          cd build
          ninja
      - name: Determine changed files
        id: determine_changed_files
        run: |
          cd build
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          else
            if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
              BASE="HEAD~1"
            else
              BASE="${{ github.event.before }}"
            fi
            HEAD="${{ github.sha }}"
          fi
          CHANGED_FILES=$(git diff --name-only "$BASE" "$HEAD" || git show --name-only "$HEAD")
          # Set output
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Run selective benchmarks
        run: |
          cd build
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/Array/"; then
            ./bench_array > bench_array_result.txt || echo "Array benchmark failed" > bench_array_result.txt
          fi
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/LinkedList/list"; then
            ./bench_list > bench_list_result.txt || echo "List benchmark failed" > bench_list_result.txt
          fi
          if echo "${{ steps.determine_changed_files.outputs.changed_files }}" | grep -q "modules/datastructures/LinkedList/forward_list"; then
            ./bench_forward_list > bench_forward_list_result.txt || echo "Forward list benchmark failed" > bench_forward_list_result.txt
          fi

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            build/bench_array_result.txt
            build/bench_list_result.txt
            build/bench_forward_list_result.txt